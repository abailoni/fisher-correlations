import sys
import numpy as np
import sympy as sym
import scipy as scy
import matplotlib.pyplot as pl
import os
import time

from scipy.integrate import quad
from scipy.optimize import newton
from os import walk
from re import match
from sympy import srepr
from re import findall

epsilon = 0.03 # epsilon in the numerical derivative

# Planck 2015: (TT+lowP)
omegab_h2 = 0.022
omegac_h2 = 0.12
H0 = 67.
ref_values = {'Om_b': omegab_h2/(H0/100)**2, 'Om_m': (omegab_h2+omegac_h2)/(H0/100)**2, 'h': H0/100., 'n_s': 0.965, 'Om_k':0., 'gamma': 0.55555556, 'w_p':-0.98, 'w_1':0., 'sigma8': 0.83}


import camb
from camb import model

norms = {}

#Tcmb->2.7255,OmegaNu->0,YHe->.24,MasslessNeutrinos->3.046,MassiveNeutrinos->0,NuMassDegeneracies->{0},NuMassFractions->{1},ScalarInitialCondition->"adiabatic",NonLinear->"none",WantCMB->True,WantTransfer->True,WantCls->True,ScalarSpectralIndex->{.96},ScalarRunning->{0},TensorSpectralIndex->{0},RatioScalarTensorAmplitudes->{1},ScalarPowerAmplitude->{2.1*^-9},PivotScalar->.05,PivotTensor->.05,DoReionization->True,UseOpticalDepth->False,OpticalDepth->0.,ReionizationRedshift->10.,ReionizationFraction->1.,ReionizationDeltaRedshift->.5,TransferHighPrecision->False,WantScalars->True,WantVectors->True,WantTensors->True,WantZstar->True, WantZdrag->True,OutputNormalization->1,MaxEll->1500,MaxEtaK->3000.,MaxEtaKTensor->800.,MaxEllTensor->400,TransferKmax->.9,TransferKperLogInt->0,TransferRedshifts->{0.},AccuratePolarization->True,AccurateReionization->False,AccurateBB->False,DoLensing->True,OnlyTransfers->False,DerivedParameters->True,MassiveNuMethod->"best"

INPUT_PATH = "INPUT/autogenerated_CAMB/"

def Fourier_W_k(x):
    return 3./x**3 * (np.sin(x)-x*np.cos(x))

def compute_CAMB_spectra(N_points=290,mink=1e-5,maxk=1.55):
    import_variables = ["spectrum","h","Om_b","Om_m","n_s"]
    ref_values_array = np.array([ref_values[var] for var in import_variables[1:]])
    CAMB_spectra, CAMB_s8 = {}, {} # s8 no longer necessary..
    h, omb, omm, ns = ref_values["h"], ref_values["Om_b"], ref_values["Om_m"], ref_values["n_s"] # just for convenience

    # -------------------------------------
    # Check if data were already computed:
    # -------------------------------------
    for (dirpath, dirnames, filenames) in walk(INPUT_PATH):
        names = [ fi for fi in filenames if fi.endswith(".csv") ]
        break
    compute_CAMB = False
    if "params.csv" in names:
        saved_data = np.genfromtxt(INPUT_PATH+"params.csv", delimiter=' ',dtype='str')
        # np.loadtxt(open(INPUT_PATH+"params.csv","rb"))
        old_values = {}
        for i in range(saved_data.shape[0]):
            var = saved_data[i,0]
            old_values[var] = float(saved_data[i,1])
        for var in old_values:
            if abs(old_values[var]-ref_values[var])>1e-2: #different
                compute_CAMB = True
    else:
        compute_CAMB = True
    if compute_CAMB:
        # ----------------------------
        # Generate spectra with CAMB:
        # ----------------------------
        print('Using CAMB installed at '+ os.path.realpath(os.path.join(os.getcwd(),'..')))
        sys.path.insert(0,os.path.realpath(os.path.join(os.getcwd(),'..')))

        # REFERENCE SPECTRUM:
        pars = camb.CAMBparams()

        # Santiago's values: (in teoria..)
        pars.WantTransfer = 1
        pars.set_for_lmax(lmax=1500, max_eta_k=3000.)
        pars.InitPower.set_params(As=2.1*1e-9, nrun=0, nrunrun=0, r=0, nt=None, ntrun=0, pivot_scalar=0.05, pivot_tensor=0.05, parameterization=2)

        pars.set_cosmology(H0=h*100, ombh2=omb*h**2, omch2=(omm-omb)*h**2)
        pars.set_dark_energy(w=ref_values["w_p"])
        pars.InitPower.set_params(ns=ns)
        print "\nComputing spectrum and derivatives with CAMB:"
        print " - reference spectrum,"
        pars.set_matter_power(redshifts=[0.], kmax=maxk)
        pars.NonLinear = model.NonLinear_none
        results = camb.get_results(pars)
        kh, z, CAMB_spectra["spectrum"] = results.get_matter_power_spectrum(minkh=mink, maxkh=maxk, npoints = N_points)
        kh = np.array(kh)
        CAMB_spectra["spectrum"] = np.array(CAMB_spectra["spectrum"][0])
        #CAMB_s8["spectrum"] = np.array(results.get_sigma8())
        np.savetxt(INPUT_PATH+"spectrum.csv",np.column_stack((kh,CAMB_spectra["spectrum"])))

        # Hubble parameter:
        print " - h,"
        pars.set_cosmology(H0=h*100*(1+epsilon), ombh2=omb* (h*(1+epsilon))**2, omch2=(omm-omb)* (h*(1+epsilon))**2)
        results.calc_power_spectra(pars)
        _, _, CAMB_spectra["h"] = results.get_matter_power_spectrum(minkh=mink, maxkh=maxk, npoints = N_points)
        CAMB_spectra["h"] = np.array(CAMB_spectra["h"][0])
        #CAMB_s8["h"] = np.array(results.get_sigma8())
        pars.set_cosmology(H0=h*100, ombh2=omb*h**2, omch2=(omm-omb)*h**2)
        np.savetxt(INPUT_PATH+"h.csv",np.column_stack((kh,CAMB_spectra["h"])))

        # Omega_b parameter:
        print " - Omega_b,"
        pars.set_cosmology(ombh2=omb*(1+epsilon)*h**2, omch2=(omm-omb*(1+epsilon))*h**2)
        results.calc_power_spectra(pars)
        _, _, CAMB_spectra["Om_b"] = results.get_matter_power_spectrum(minkh=mink, maxkh=maxk, npoints = N_points)
        CAMB_spectra["Om_b"] = np.array(CAMB_spectra["Om_b"][0])
        #CAMB_s8["Om_b"] = np.array(results.get_sigma8())
        pars.set_cosmology(ombh2=omb*h**2, omch2=(omm-omb)*h**2)
        np.savetxt(INPUT_PATH+"Om_b.csv",np.column_stack((kh,CAMB_spectra["Om_b"])))

        # Omega_m parameter:
        print " - Omega_m,"
        pars.set_cosmology(omch2=(omm*(1+epsilon)-omb)*h**2)
        results.calc_power_spectra(pars)
        _, _, CAMB_spectra["Om_m"] = results.get_matter_power_spectrum(minkh=mink, maxkh=maxk, npoints = N_points)
        CAMB_spectra["Om_m"] = np.array(CAMB_spectra["Om_m"][0])
        #CAMB_s8["Om_m"] = np.array(results.get_sigma8())
        pars.set_cosmology(omch2=(omm-omb)*h**2)
        np.savetxt(INPUT_PATH+"Om_m.csv",np.column_stack((kh,CAMB_spectra["Om_m"])))

        # n_s parameter:
        print " - ns"
        pars.InitPower.set_params(ns=ns*(1+epsilon))
        results.calc_power_spectra(pars)
        _, _, CAMB_spectra["n_s"] = results.get_matter_power_spectrum(minkh=mink, maxkh=maxk, npoints = N_points)
        CAMB_spectra["n_s"] = np.array(CAMB_spectra["n_s"][0])
        #CAMB_s8["n_s"] = np.array(results.get_sigma8())
        pars.InitPower.set_params(ns=ns)
        np.savetxt(INPUT_PATH+"n_s.csv",np.column_stack((kh,CAMB_spectra["n_s"])))

        np.savetxt(INPUT_PATH+"params.csv",np.column_stack((np.array(import_variables[1:]),ref_values_array)),delimiter=" ", fmt="%s")
    else:
        # ----------------------------------
        # Import previously computed data:
        # ----------------------------------
        print "CAMB spectra already computed previously. Importing files..."
        for var in import_variables:
            saved_data = np.loadtxt(open(INPUT_PATH+var+".csv","rb"))
            CAMB_spectra[var] = saved_data[:,1]
            if var=="spectrum":
                kh = saved_data[:,0]

compute_CAMB_spectra()
